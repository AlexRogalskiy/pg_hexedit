#!/bin/bash
usage() {
    cat <<EOM
    Usage:
    $(basename $0) relname

EOM
    exit 0
}

[ -z $1 ] && { usage; }

source ./hexedit.cfg

relname=$1

# Spoof home director, to avoid clobbering real /.wxHexEditor file
export HOME=`pwd`
wxconfig="$HOME/.wxHexEditor"

psql -c "CHECKPOINT"
if [ ! $? -eq 0 ]; then
   echo "CHECKPOINT failed"
   exit
fi
psql -c "CREATE EXTENSION IF NOT EXISTS pageinspect"
if [ ! $? -eq 0 ]; then
   echo "creating pageinspect extension failed"
   exit
fi

RFN=$(psql --no-psqlrc -tA -c "SELECT pg_relation_filepath('$relname')")
if [ ! $? -eq 0 ]; then
   echo "invoking pg_relation_filepath() failed"
   exit
fi

echo "Contiguous flags in GIN index summary:"

psql --no-psqlrc -P pager=off -c "WITH recursive index_details AS (
  SELECT '$relname'::text AS idx
),
size_in_pages_index AS (
  SELECT
    (pg_relation_size(idx::regclass) / (2^13))::int4 AS size_pages
  FROM
    index_details
),
page_stats AS (
  SELECT
    index_details.*,
    stats.*,
    i AS series
  FROM
    index_details,
    size_in_pages_index,
    LATERAL (SELECT i FROM generate_series(0, size_pages - 1) i) AS series,
    LATERAL (SELECT * FROM gin_page_opaque_info(get_raw_page(idx, i))) AS stats
  ORDER BY
    i
),
recursive_rangewise_blocks(flags, series, first) AS (
  SELECT
    p.flags,
    0,
    0
  FROM
    page_stats p
  WHERE
    series = 0
  UNION
  SELECT
    i.flags,
    i.series,
    CASE WHEN i.flags = o.flags THEN o.first ELSE i.series END
  FROM
    page_stats AS i,
    recursive_rangewise_blocks AS o
  WHERE
    i.series = o.series + 1
)
SELECT
  flags,
  first AS first_block_in_series,
  lead(series, 1, size_pages) OVER() - 1 AS last_block_in_series,
  first * (2^13) AS offset_bytes_first
FROM
  recursive_rangewise_blocks,
  size_in_pages_index
WHERE
  series = first
ORDER BY
  first;"

if [ ! $? -eq 0 ]; then
   echo "displaying contiguous range of blocks failed; is $relname a GIN index?"
   exit
fi

# Put minimal .wxHexEditor registry style config file in place, so old tags are
# forgotten.  We don't do anything special for GIN here -- this script leaves
# it up to the user to manually input offsets, since the context of which range
# is which is too complicated for automatic offsets to work sensibly.

echo "Replacing $wxconfig with pg_hexedit optimized settings..."
cat > $wxconfig <<- EOM
UpdateCheck=0
UseCustomHexFormat=0
CustomHexFormat=xx
UseBytesPerLineLimit=1
BytesPerLineLimit=$BYTES_PER_LINE_LIMIT
FontSize=$FONTSIZE
CharacterEncodingFamily=DOS
CharacterEncoding=OEM - IBM PC/DOS CP437 - MS-DOS Latin US
ScreenFullScreen=1
AutoShowTagPanel=0
GoToOptions=7
EOM

PGDATA=$(psql --no-psqlrc -tA -c "SELECT setting FROM pg_settings WHERE name = 'data_directory'")
echo "Determined that data directory is $PGDATA"
FULLPATH="$PGDATA/$RFN"
echo "Running pg_hexedit against $FULLPATH, the first segment in relation $relname..."
echo "Note: Only blocks 0 - $BLOCK_TAGS will be annotated, to keep overhead low"
./pg_hexedit -R 0 $BLOCK_TAGS $FULLPATH > $FULLPATH.tags

if [ ! $? -eq 0 ]; then
   echo "Error encountered by pg_hexedit. Could not generate all tags."
   echo "You may still wish to run: $HEXEDITOR $FULLPATH"
   exit
fi

echo "Opening $FULLPATH with $HEXEDITOR..."
echo "Tip: 'Go to Offset' dialog (shortcut: Ctrl + G) has children of root and root offsets cached"
# Output from wxHexEditor is verbose, and not terribly useful, so we redirect:
$HEXEDITOR $FULLPATH &> /dev/null
